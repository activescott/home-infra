# example / defaults: https://github.com/bitnami/charts/blob/main/bitnami/wordpress/values.yaml

## @param wordpressUsername WordPress username
##
wordpressUsername: oksana
## @param wordpressPassword WordPress user password
## Defaults to a random 10-character alphanumeric string if not set
##
#wordpressPassword: ""
## @param existingSecret Name of existing secret containing WordPress credentials
## NOTE: Must contain key `wordpress-password`
## NOTE: When it's set, the `wordpressPassword` parameter is ignored
##
existingSecret: "wordpress-user-creds"
## @param wordpressEmail WordPress user email
##
wordpressEmail: oksana@willeke.com
## @param wordpressFirstName WordPress user first name
##
wordpressFirstName: oksana
## @param wordpressLastName WordPress user last name
##
wordpressLastName: Willeke
## @param wordpressBlogName Blog name
##
wordpressBlogName: Oksana's Blog!

## @param allowEmptyPassword Allow the container to be started with blank passwords
##
allowEmptyPassword: false

## Configure the ingress resource that allows you to access the WordPress installation
## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
##
service:
  ## @param service.type WordPress service type
  ##
  # Exposes the Service on a cluster-internal IP. Choosing this value makes the Service only reachable from within the cluster
  # We expose it externally via an Ingress so that we can match requested domain/url to map here.
  type: ClusterIP

## Configure the ingress resource that allows you to access the WordPress installation
## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
##
ingress:
  ## @param ingress.enabled Enable ingress record generation for WordPress
  ##
  enabled: true

  ## @param ingress.hostname Default host for the ingress record. The hostname is templated and thus can contain other variable references.
  ##
  hostname: www.oksana.willeke.com

  ## @param ingress.tls Enable TLS configuration for the host defined at `ingress.hostname` parameter
  ## TLS certificates will be retrieved from a TLS secret with name: `{{- printf "%s-tls" .Values.ingress.hostname }}`
  ## You can:
  ##   - Use the `ingress.secrets` parameter to create this TLS secret
  ##   - Rely on cert-manager to create it by setting the corresponding annotations
  ##   - Rely on Helm to create self-signed certificates by setting `ingress.selfSigned=true`
  ##
  tls: true
  ## @param ingress.annotations Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
  ## For a full list of possible ingress annotations, please see
  ## ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/nginx-configuration/annotations.md
  ## Use this parameter to set the required annotations for cert-manager, see
  ## ref: https://cert-manager.io/docs/usage/ingress/#supported-annotations
  ##
  ## e.g:
  ## annotations:
  ##   kubernetes.io/ingress.class: nginx
  ##   cert-manager.io/cluster-issuer: cluster-issuer-name
  ##
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-production

## Persistence Parameters
## ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
##
persistence:
  ## @param persistence.enabled Enable persistence using Persistent Volume Claims
  ##
  enabled: true

  ## @param persistence.existingClaim The name of an existing PVC to use for persistence
  ##
  existingClaim: oksana-wordpress-pvc

mariadb:
  ## @param mariadb.enabled Deploy a MariaDB server to satisfy the applications database requirements
  ## To use an external database set this to false and configure the `externalDatabase.*` parameters
  ##
  enabled: true

  auth:
    database: bitnami_wordpress
    username: wp
    existingSecret: wordpress-mariadb-creds
    forcePassword: true

  ## MariaDB Primary configuration
  ##
  ## More on the maridb config options at https://github.com/bitnami/charts/tree/main/bitnami/mariadb
  primary:
    ## MariaDB Primary Persistence parameters
    ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
    ## @param mariadb.primary.persistence.enabled Enable persistence on MariaDB using PVC(s)
    ## @param mariadb.primary.persistence.storageClass Persistent Volume storage class
    ## @param mariadb.primary.persistence.accessModes [array] Persistent Volume access modes
    ## @param mariadb.primary.persistence.size Persistent Volume size
    ##
    persistence:
      enabled: true
      existingClaim: oksana-wordpress-mariadb-pvc
    